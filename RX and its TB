1) UART Receiver (RX) Code â€” Verilog

module uart_rx (
input clk,
input rst,
input rx, // Serial input
output reg rx_done,
output reg [7:0] rx_data,
output reg rx_busy
);
parameter CLKS_PER_BIT = 1667;
reg [15:0] clk_count = 0;
reg [3:0] bit_index = 0;
reg [7:0] rx_shift = 0;
reg receiving = 0;
reg rx_d1 = 1, rx_d2 = 1;
// Synchronize RX input
always @(posedge clk) begin
rx_d1 <= rx;
rx_d2 <= rx_d1;
end
always @(posedge clk or posedge rst) begin
if (rst) begin
rx_done <= 0;
rx_data <= 0;
rx_busy <= 0;
clk_count <= 0;
bit_index <= 0;
receiving <= 0;
end else begin
rx_done <= 0;
if (!receiving && rx_d2 == 0) begin
// Detected start bit
receiving <= 1;
rx_busy <= 1;
clk_count <= CLKS_PER_BIT / 2; // Align to mid-bit
bit_index <= 0;
end else if (receiving) begin
if (clk_count == CLKS_PER_BIT - 1) begin
clk_count <= 0;
bit_index <= bit_index + 1;
case (bit_index)
0: ; // Start bit - ignore
1: rx_shift[0] <= rx_d2;
2: rx_shift[1] <= rx_d2;
3: rx_shift[2] <= rx_d2;
4: rx_shift[3] <= rx_d2;
5: rx_shift[4] <= rx_d2;
6: rx_shift[5] <= rx_d2;
7: rx_shift[6] <= rx_d2;
8: rx_shift[7] <= rx_d2;
9: begin
rx_data <= rx_shift;
rx_done <= 1;
rx_busy <= 0;
receiving <= 0;
end
endcase
end else begin
clk_count <= clk_count + 1;
end
end
end
end
endmodule



2) UART Receiver Testbench

`timescale 1ns / 1ps
module uart_rx_tb;
reg clk = 0;
reg rst = 0;
reg rx = 1; // Idle is high
wire rx_done;
wire [7:0] rx_data;
wire rx_busy;
// Clock generation (60 MHz -> 16.67 ns period)
always #8.33 clk = ~clk;
parameter CLKS_PER_BIT = 1667;
uart_rx #(.CLKS_PER_BIT(CLKS_PER_BIT)) uut (
.clk(clk),
.rst(rst),
.rx(rx),
.rx_done(rx_done),
.rx_data(rx_data),
.rx_busy(rx_busy)
);
// Task to send a UART frame: 1 start bit, 8 data bits, 1 stop bit
task uart_send_byte;
input [7:0] data;
integer i;
begin
// Start bit
rx = 0;
#(CLKS_PER_BIT * 20);
// Data bits (LSB first)
for (i = 0; i < 8; i = i + 1) begin
rx = data[i];
#(CLKS_PER_BIT * 20);
end
// Stop bit
rx = 1;
#(CLKS_PER_BIT * 20);
end
endtask
initial begin
// Initial conditions
rx = 1;
rst = 1;
#100;
rst = 0;
// Send a byte
#10000;
uart_send_byte(8'hA5); // Binary: 10100101
// Wait and observe
#100000;
if (rx_done) begin
$display("Received byte: %h", rx_data);
end else begin
$display("Reception failed or not completed.");
end
$stop;
end
endmodule
