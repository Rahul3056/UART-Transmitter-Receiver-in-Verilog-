
1) UART Transmitter (TX) Code â€” Verilog.

module uart_tx (
input clk,
input rst,
input tx_start,
input [7:0] tx_data,
output reg tx,
output reg tx_busy
);
parameter CLKS_PER_BIT = 1667; // Adjust according to your baud rate and clk freq
reg [7:0] data_reg;
reg [3:0] bit_index;
reg [15:0] clk_count;
reg sending;
reg start_latched;
always @(posedge clk or posedge rst) begin
if (rst) begin
tx <= 1'b1;
tx_busy <= 0;
clk_count <= 0;
bit_index <= 0;
sending <= 0;
data_reg <= 0;
end else begin
if (tx_start && !tx_busy && !sending) begin
data_reg <= tx_data;
sending <= 1;
tx_busy <= 1;
clk_count <= 0;
bit_index <= 0;
end else if (sending) begin
if (clk_count == CLKS_PER_BIT - 1) begin
clk_count <= 0;
bit_index <= bit_index + 1;
end else begin
clk_count <= clk_count + 1;
end
case (bit_index)
0: tx <= 0; // Start bit
1: tx <= data_reg[0];
2: tx <= data_reg[1];
3: tx <= data_reg[2];
4: tx <= data_reg[3];
5: tx <= data_reg[4];
6: tx <= data_reg[5];
7: tx <= data_reg[6];
8: tx <= data_reg[7];
9: tx <= 1; // Stop bit
10: begin
sending <= 0;
tx_busy <= 0;
end
endcase
end
end
end
endmodule




2) UART Transmitter Testbench

`timescale 1ns/1ps
module uart_tx_tb;
reg clk = 0;
reg rst = 1;
reg tx_start = 0;
reg [7:0] tx_data = 8'b0;
wire tx;
wire tx_busy;
parameter CLK_PERIOD = 62.5; // 100 MHz clock
uart_tx #(.CLKS_PER_BIT(1667 )) DUT (
.clk(clk),
.rst(rst),
.tx_start(tx_start),
.tx_data(tx_data),
.tx(tx),
.tx_busy(tx_busy)
);
// Clock generation
always #(CLK_PERIOD/2) clk = ~clk;
initial begin
$dumpfile("uart_tx_tb.vcd");
$dumpvars(0, uart_tx_tb);
// Initial reset
#50;
rst = 0;
// Send 0xA5
wait(!tx_busy);
tx_data = 8'hA5;
tx_start = 1;
#CLK_PERIOD;
tx_start = 0;
// Wait for transmission to finish
wait(!tx_busy);
// Send 0x3C
#100; // wait some idle time
tx_data = 8'h3C;
tx_start = 1;
#CLK_PERIOD;
tx_start = 0;
wait(!tx_busy);
// Finish
#200;
$finish;
end
endmodule
